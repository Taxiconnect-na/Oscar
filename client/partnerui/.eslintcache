[{"/home/mack/Documents/Admin/Admin-App/client/partnerui/src/index.js":"1","/home/mack/Documents/Admin/Admin-App/client/partnerui/src/App.js":"2","/home/mack/Documents/Admin/Admin-App/client/partnerui/src/components/partners/partnersAdmin.js":"3"},{"size":626,"mtime":1613394526296,"results":"4","hashOfConfig":"5"},{"size":368,"mtime":1613394573229,"results":"6","hashOfConfig":"5"},{"size":14584,"mtime":1613395211066,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1v3ldsr",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"/home/mack/Documents/Admin/Admin-App/client/partnerui/src/index.js",[],"/home/mack/Documents/Admin/Admin-App/client/partnerui/src/App.js",[],"/home/mack/Documents/Admin/Admin-App/client/partnerui/src/components/partners/partnersAdmin.js",["15","16","17","18","19","20","21","22","23","24","25","26","27"],"import React, { useState, useEffect } from 'react'\nimport io from 'socket.io-client'\nimport { FaUserAlt } from \"react-icons/fa\"\nimport \"./partnersAdmin.css\"\nimport queryString from 'query-string'\n\nimport { BrowserRouter as Router, Link, useLocation } from 'react-router-dom'\n\n/**\n * @function useLocalStorage: Works like useState except add persistence of data upon reload\n * @param {string} key \n * @param {any type} initialValue \n */\nfunction useLocalStorage(key, initialValue) {\n    // State to store our value\n    // Pass initial state function to useState so logic is only executed once\n    const [storedValue, setStoredValue] = useState(() => {\n      try {\n        // Get from local storage by key\n        const item = window.localStorage.getItem(key);\n        // Parse stored json or if none return initialValue\n        return item ? JSON.parse(item) : initialValue;\n      } catch (error) {\n        // If error also return initialValue\n        console.log(error);\n        return initialValue;\n      }\n    });\n  \n    // Return a wrapped version of useState's setter function that ...\n    // ... persists the new value to localStorage.\n    const setValue = value => {\n      try {\n        // Allow value to be a function so we have same API as useState\n        const valueToStore =\n          value instanceof Function ? value(storedValue) : value;\n        // Save state\n        setStoredValue(valueToStore);\n        // Save to local storage\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      } catch (error) {\n        // A more advanced implementation would handle the error case\n        console.log(error);\n      }\n    };\n  \n    return [storedValue, setValue];\n}\n\n// Driver row\n\nconst DriverRow = (props) => {\n    return(\n        <tr>\n            <td><FaUserAlt size={30}/></td>\n            <td>{ props.driver.name}</td>\n            <td>{ props.driver.surname }</td>\n            <td>{ props.driver.phone_number }</td>\n            <td>{ props.driver.taxi_number }</td>\n            <td>{ props.driver.plate_number }</td>\n            <td>{ props.driver.car_brand }</td>\n            <td>{ props.driver.status }</td>\n            <td> { props.driver.totalMoneyToday }</td>\n            <td>{ props.driver.totalmoney}</td> \n            <td>{ props.driver.todaytrip }</td>\n            <td>{ props.driver.totaltrip}</td>\n            \n        </tr>\n    )\n}\n\n// Initialize interval\nvar interval = null\n\nexport default function PartnersAdmin() {\n    // Initialize socket connection\n    var ENDPOINT = 'localhost:5558'\n    var socket = io(ENDPOINT, {\n                    transports: ['websocket', 'polling', 'flashsocket'],\n                    reconnection: true,\n                    reconnectionAttempts: Infinity})\n    \n    //Initialize state variables\n    let [name, setName] = useState(null)\n    let [email, setEmail] = useState(null)\n    let [password, setPassword] = useState(null)\n    var [test, setTest] = useState(\"\")\n    // Use LocalStorage to preserve authentication state\n    let [authenticated, setAuthentication] = useLocalStorage(\"authenticated\", false)\n\n    let [partnerDrivers, setPartnerDrivers] = useState([])\n    let [driversCount, setDriversCount] = useState(5)\n    let [totalMoney, setTotalMoney] = useState(5) \n    let [totalMoneyToday, setTotalMoneyToday] = useState(5)\n    let [allData, setAllData] = useState({})\n\n \n    const [details, setDetails] = useLocalStorage(\"details\", {name:\"\", email:\"\", password:\"\"})\n    const [error, setError] = useState(\"\")\n    \n\n    useEffect(() => {\n        \n        if(authenticated) {\n            if(interval === null) {\n\n                interval = setInterval(() => {\n                    console.log(\"Counting......\")\n    \n                    socket.emit(\"getPartnerData\", { provider: details.name })\n        \n                    socket.on(\"getPartnerData-response\", (data) => {\n                        console.log(\"getting getPartnerData-response data\")\n\n                        /*let List = data.drivers_list.map((user) => {\n                            return new Promise((outcome) => {\n                                \n                            })\n                        })*/\n                        /*let total_money = data.total_money\n                        let total_money_today = data.total_money_today\n                        let drivers_count = data.drivers_count\n                        let mydata = data.drivers  */\n                        if ((data !== undefined) || (data != null)) {\n                            setPartnerDrivers([...data[\"drivers\"]])\n                            setTotalMoney(data[\"total_money\"])\n                            setTotalMoneyToday(data[\"total_money_today\"])\n                            setDriversCount(data[\"drivers_count\"])\n\n                            console.log(data)\n                            setAllData(data)\n                            console.log(`All data: ${allData}`)\n\n                            console.log(`total money: ${totalMoney}`)\n                            console.log(`total money today : ${totalMoneyToday}`) \n                            console.log(`drivers count: ${driversCount}`) \n                            console.log(`drivers list: ${partnerDrivers}`)\n                            //console.log(`DRIVERS: ${partnerDrivers[0].phone_number}`)\n                            console.log(partnerDrivers)\n                        }\n                        \n                    })                    \n                },1000)\n            }\n\n        }\n        \n        return(() => {\n            clearInterval(interval)\n        })\n       \n    }, [ENDPOINT, \n        /*details, \n        allData, \n        partnerDrivers,\n        totalMoney,\n        totalMoneyToday,\n        driversCount,\n        authenticated,\n        socket */\n    ])\n\n    const Logout = () => {\n        setAuthentication(false)\n       \n        setDetails({name:\"\", email:\"\", password:\"\"})\n        \n        return(() => {clearInterval(interval)})\n        \n    }\n\n    const submitHandler = e => {\n        e.preventDefault()\n        //Authenticate user:\n        socket.emit(\"authenticate\", {\n            name: details.name,\n            email: details.email,\n            password: details.password\n        })\n       \n        socket.on(\"authenticate-response\", (data) => {\n            \n            if(data.authenticated) {\n                //  Upon successful authentication:\n                setAuthentication(true)  \n                setName(details.name)\n                setEmail(details.email)\n                setPassword(details.password)\n              \n                if (interval === null ) {\n\n                    interval = setInterval(() => {\n                        console.log(\"Counting2......\")\n        \n                        socket.emit(\"getPartnerData\", {provider: details.name})\n            \n                        socket.on(\"getPartnerData-response\", (data) => {\n                            console.log(\"getting getPartnerData-response data\")\n                            \n                            /*let total_money = data.total_money\n                            let total_money_today = data.total_money_today\n                            let drivers_count = data.drivers_count\n                            let mydata = data.drivers_list*/\n\n                            setPartnerDrivers(data.drivers)\n                            setTotalMoney(data.total_money)\n                            setTotalMoneyToday(data.total_money_today)\n                            setDriversCount(data.drivers_count)\n\n                            console.log(`received data from socket\" ${data.total_money}`)\n                            console.log(`partners's total money2 : ${data.drivers[0]}`)\n                        })                    \n                    },1500) \n                }\n                             \n            }\n            else {\n\n                setError(\"No match found\")\n            }\n        })\n        \n    } \n    //\n    const driverData = () => {\n        return partnerDrivers.map((driver) => {\n            return <DriverRow driver={driver} />\n        })\n        \n    }\n\n    console.log(allData.drivers)\n    // styles:\n    const card = {\n        backgroundColor: \"#62bbde\"\n    }\n    const card_header = {\n        backgroundColor: \"#3183a3\",\n        \n    }\n    const form_style = {\n        width: 400,\n        margin: \"auto\",\n        marginTop: 100\n    }\n    // Returned content:\n    if (!authenticated) {\n        return(\n            \n            <div>\n                <form onSubmit={submitHandler} style={form_style}>\n                    <div className=\"form-inner\">\n                    <h2 style={{ width: 100, margin: \"auto\"}}>Login</h2>\n                    {(error != \"\") ? ( <div className=\"error\">{error}</div>) : \"\"}\n                    <div className=\"form-group\">\n                        <label htmlFor=\"name\">Name:</label>\n                        <input type=\"text\" name=\"name\" id=\"name\" className=\"form-control\"\n                                onChange={e => setDetails({...details, name: e.target.value})} value={details.name} >\n                        </input>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"email\">Email:</label>\n                        <input type=\"email\" name=\"email\" id=\"email\" className=\"form-control\"\n                                onChange={e => setDetails({...details, email: e.target.value})} value={details.email}>\n                        </input>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"password\">Password:</label>\n                        <input type=\"password\" name=\"password\" id=\"password\" className=\"form-control\"\n                                onChange={e => setDetails({...details, password: e.target.value})} value={details.password}>\n                        </input>\n                    </div>\n                    <input className=\"form-control\" type=\"submit\" value=\"LOGIN\" style={{ backgroundColor: \"#157ab0\"}}/>\n                    </div>\n                </form>\n            </div>\n        )\n\n    } else {\n        return(\n            <div >\n\n                <nav className=\"navbar navbar-expand-lg \" style={{ backgroundColor: \"#0b5054\"}}>\n                    <a className=\"navbar-brand\" href=\"#\" style={{color:\"white\", marginLeft: 100}}>Dashboard</a>\n\n                    <ul className=\"nav ml-auto\">\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link active\" style={{marginRight: 45}}>\n                            <button className=\"btn btn-primary btn-sm\" type=\"submit\" onClick={Logout}>Logout\n                            </button></a>\n                    </li>\n                    \n                    </ul>\n                </nav>\n\n                <div className=\"jumbotron jumbotron-fluid text-center\">\n                    <div className=\"container\">\n                        <h1 className=\"display-4\">Welcome to your dashboard</h1>\n                        <p className=\"lead\">Additional data available upon request</p>\n                        <hr class=\"my-4\"></hr>\n                    </div>\n                </div>\n\n                <div className=\"container\">\n                    \n                    <div class=\"container\">\n                        <div class=\"row text-center\">\n                            <div class=\"col-sm\">\n                                <div className=\"card\" style={card}>\n                                <div className=\"card-header\" style={card_header}>\n                                    Registered drivers \n                                </div>\n                                <div className=\"card-body\">\n                                    <h3>{ driversCount }</h3>\n                                </div>\n                                </div>\n                            </div>\n                            <div class=\"col-sm\">\n                                <div className=\"card\" style={card}>\n                                <div className=\"card-header\" style= {card_header}>\n                                    Total fare\n                                </div>\n                                <div className=\"card-body\">\n                                    <h3>N$ { totalMoney }</h3>\n                                </div>\n                                </div>\n                            </div>\n                            <div class=\"col-sm\">\n                                <div className=\"card\" style={card}>\n                                <div className=\"card-header\" style={card_header}>\n                                    Total fare today \n                                </div>\n                                <div className=\"card-body\">\n                                    <h3>N$ { totalMoneyToday }</h3>\n                                </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n\n                 \n                    <br></br>\n                    \n                    <div className=\"card\">\n                        <div className=\"card-header\">\n                            Registered drivers \n                        </div>\n                        <div className=\"card-body\">\n                        <table className=\"table-striped\" style={{ margin: 15}}>\n                                <thead className=\"thead-light\">\n                                    <tr>\n                                        <th>Profile</th>\n                                        <th>Name</th>\n                                        <th>Surname</th>\n                                        <th>Phone </th>\n                                        <th>Taxi Number</th>\n                                        <th>Plate number</th>\n                                        <th>Car brand</th>\n                                        <th>Status</th>\n                                        <th>Daily profit</th>\n                                        <th>TotalProfit</th>\n                                        <th>Daily connect</th>\n                                        <th>Total connect</th>\n                                    </tr>\n\n                                </thead>\n                                <tbody>\n                                { driverData() }\n                                </tbody>\n                            </table> \n                            </div>\n                        </div>\n                </div>           \n            </div>\n        )\n    }\n}\n\n",{"ruleId":"28","severity":1,"message":"29","line":5,"column":8,"nodeType":"30","messageId":"31","endLine":5,"endColumn":19},{"ruleId":"28","severity":1,"message":"32","line":7,"column":27,"nodeType":"30","messageId":"31","endLine":7,"endColumn":33},{"ruleId":"28","severity":1,"message":"33","line":7,"column":35,"nodeType":"30","messageId":"31","endLine":7,"endColumn":39},{"ruleId":"28","severity":1,"message":"34","line":7,"column":41,"nodeType":"30","messageId":"31","endLine":7,"endColumn":52},{"ruleId":"28","severity":1,"message":"35","line":84,"column":10,"nodeType":"30","messageId":"31","endLine":84,"endColumn":14},{"ruleId":"28","severity":1,"message":"36","line":85,"column":10,"nodeType":"30","messageId":"31","endLine":85,"endColumn":15},{"ruleId":"28","severity":1,"message":"37","line":86,"column":10,"nodeType":"30","messageId":"31","endLine":86,"endColumn":18},{"ruleId":"28","severity":1,"message":"38","line":87,"column":10,"nodeType":"30","messageId":"31","endLine":87,"endColumn":14},{"ruleId":"28","severity":1,"message":"39","line":87,"column":16,"nodeType":"30","messageId":"31","endLine":87,"endColumn":23},{"ruleId":"40","severity":1,"message":"41","line":152,"column":8,"nodeType":"42","endLine":161,"endColumn":6,"suggestions":"43"},{"ruleId":"44","severity":1,"message":"45","line":254,"column":29,"nodeType":"46","messageId":"47","endLine":254,"endColumn":31},{"ruleId":"48","severity":1,"message":"49","line":284,"column":21,"nodeType":"50","endLine":284,"endColumn":99},{"ruleId":"48","severity":1,"message":"51","line":288,"column":25,"nodeType":"50","endLine":288,"endColumn":82},"no-unused-vars","'queryString' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'Link' is defined but never used.","'useLocation' is defined but never used.","'name' is assigned a value but never used.","'email' is assigned a value but never used.","'password' is assigned a value but never used.","'test' is assigned a value but never used.","'setTest' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'allData', 'authenticated', 'details.name', 'driversCount', 'partnerDrivers', 'socket', 'totalMoney', and 'totalMoneyToday'. Either include them or remove the dependency array.","ArrayExpression",["52"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",{"desc":"53","fix":"54"},"Update the dependencies array to be: [ENDPOINT, allData, authenticated, details.name, driversCount, partnerDrivers, socket, totalMoney, totalMoneyToday]",{"range":"55","text":"56"},[5593,5780],"[ENDPOINT, allData, authenticated, details.name, driversCount, partnerDrivers, socket, totalMoney, totalMoneyToday]"]