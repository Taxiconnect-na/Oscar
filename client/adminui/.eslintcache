[{"/home/mack/Documents/Admin/Admin-App/client/adminui/src/index.js":"1","/home/mack/Documents/Admin/Admin-App/client/adminui/src/App.js":"2","/home/mack/Documents/Admin/Admin-App/client/adminui/src/components/sidebar/sidebar.js":"3","/home/mack/Documents/Admin/Admin-App/client/adminui/src/components/overview/overview.js":"4","/home/mack/Documents/Admin/Admin-App/client/adminui/src/components/driverRegistration/driverRegistration.js":"5","/home/mack/Documents/Admin/Admin-App/client/adminui/src/components/rideOverview/rideOverview.js":"6","/home/mack/Documents/Admin/Admin-App/client/adminui/src/components/deliveryOverview/deliveryOverview.js":"7"},{"size":578,"mtime":1611571578612,"results":"8","hashOfConfig":"9"},{"size":777,"mtime":1611873627521,"results":"10","hashOfConfig":"9"},{"size":1299,"mtime":1612006333264,"results":"11","hashOfConfig":"9"},{"size":8001,"mtime":1611759405407,"results":"12","hashOfConfig":"9"},{"size":25889,"mtime":1612182750412,"results":"13","hashOfConfig":"9"},{"size":21149,"mtime":1612138329622,"results":"14","hashOfConfig":"9"},{"size":21075,"mtime":1612138722159,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"34ofk4",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"18"},"/home/mack/Documents/Admin/Admin-App/client/adminui/src/index.js",[],["35","36"],"/home/mack/Documents/Admin/Admin-App/client/adminui/src/App.js",["37"],"import React from 'react'\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\"\n\n//Import components\nimport Overview from \"./components/overview/overview\"\nimport DriverRegistration from \"./components/driverRegistration/driverRegistration\"\nimport RideOverview from \"./components/rideOverview/rideOverview\"\nimport DeliveryOverview from \"./components/deliveryOverview/deliveryOverview\"\n\nfunction App() {\n  return (\n   <Router>\n     \n        <Route path=\"/\" exact component={Overview} />\n        <Route path=\"/driver-registration\"  component={DriverRegistration} />\n        <Route path= \"/trip-overview/rides\" component={RideOverview} />\n        <Route path =\"/trip-overview/deliveries\" component={DeliveryOverview} />\n   </Router>\n\n  );\n}\n\nexport default App;\n","/home/mack/Documents/Admin/Admin-App/client/adminui/src/components/sidebar/sidebar.js",["38"],"import { ProSidebar, Menu, MenuItem, SubMenu } from 'react-pro-sidebar';\nimport { BrowserRouter as Router, Link } from 'react-router-dom'  // Keep Router though not used in code\nimport 'react-pro-sidebar/dist/css/styles.css';\nimport './sidebar.scss'\n \nfunction Sidebar() {\n     \n    return(\n        <div className=\"sidebar\">\n            <ProSidebar>\n                <Menu iconShape=\"square\">\n                    <MenuItem><Link to=\"/\">Summary</Link></MenuItem> \n                    <MenuItem><Link to=\"/driver-registration\">Register Driver</Link></MenuItem>\n                    <SubMenu title=\"Trip Overview\">\n                        <SubMenu title=\"Windhoek\" >\n                            <MenuItem><Link to=\"/trip-overview/rides\">Rides</Link></MenuItem>\n                            <MenuItem><Link to=\"/trip-overview/deliveries\">Deliveries</Link></MenuItem>\n                        </SubMenu>\n                        <SubMenu title=\"Swakopmund\">\n                            <MenuItem>Not Available</MenuItem>\n                        </SubMenu>\n                    </SubMenu>\n                    <MenuItem><Link>Drivers</Link></MenuItem>\n                    <MenuItem><Link>Users </Link></MenuItem>\n                </Menu>\n            </ProSidebar>;\n        </div>\n    )\n} \n\nexport default Sidebar\n","/home/mack/Documents/Admin/Admin-App/client/adminui/src/components/overview/overview.js",[],"/home/mack/Documents/Admin/Admin-App/client/adminui/src/components/driverRegistration/driverRegistration.js",["39"],"/home/mack/Documents/Admin/Admin-App/client/adminui/src/components/rideOverview/rideOverview.js",["40","41","42","43"],"import React, {useState, useEffect} from \"react\"\nimport io from 'socket.io-client'\nimport \"./rideOverview.css\"\nimport Sidebar from \"../sidebar/sidebar\"\n\n/**\n * @function GetCashWallet : Returns the total money of trips in progress, scheduled and completed\n *                          Of a given array of rides (cash and delivery returned)\n * @param {array} arrayData : An array of rides from either an API or Database of rides with known\n *                            keys. \n * \n */\n\nfunction GetCashWallet(arrayData, resolve) {\n  \n    let fare_array = [];\n    let fare_array_cash = [];\n    let fare_array_wallet = [];\n    const Sum = (arr) => arr.reduce((num1, num2) => num1 + num2, 0);\n    \n    arrayData.map((ride) => {\n        fare_array.push(Number(ride[\"amount\"]));\n\n        // Get rides with CASH as payment method\n        let payment_method = ride[\"payment_method\"].toUpperCase().trim();\n        if (/CASH/i.test(payment_method)) {\n        // if (payment_method ===\"CASH\") /CASH/ makes sure of spacing\n        fare_array_cash.push(Number(ride[\"amount\"]));\n        } else {\n        fare_array_wallet.push(Number(ride[\"amount\"]));\n        }\n    });\n    \n    let totalCash = Sum(fare_array_cash);\n    let totalWallet = Sum(fare_array_wallet);\n    let totalCashWallet = totalCash + totalWallet;\n    let CashWalletObject = { totalCash, totalWallet, totalCashWallet };\n\n    resolve(CashWalletObject)\n\n    //return CashWalletObject\n}\n\n/**\n * @function progressScheduledCompleted : Returns the total count and money of trips in progress, \n *                                        scheduled and completed\n *                          Of a given array of rides (cash and delivery returned)\n * @param {array} arrayData : An array of rides from either an API or Database of rides with known\n *                            keys. \n * \n */\n\nfunction progressScheduledCompleted(arrayData, resolve) {\n    \n    let progress = arrayData.filter(current => {\n        return current.isAccepted && current.isPickedUp\n            && !current.isArrivedToDestination\n    })\n\n    let scheduled = arrayData.filter(current => {\n        let Value = current.request_type === \"scheduled\"\n        return Value\n    })\n    let completed = arrayData.filter( current => {\n        return current.isArrivedToDestination\n    })\n    \n    Promise.all([\n            //let progressMoney = GetCashWallet(scheduled)\n        new Promise((res) => {\n            GetCashWallet(progress, res)\n        }),\n        new Promise((res) => {\n            GetCashWallet(scheduled, res)\n        }),\n        //let progressMoney = GetCashWallet(scheduled)\n        new Promise((res) => {\n            GetCashWallet(completed, res)\n        })\n\n    ]).then((future) => {\n        let [progressMoney, scheduledMoney, completedMoney] = future\n        let Object = {}\n        Object.moneyInprogress = progressMoney\n        Object.moneyScheduled = scheduledMoney\n        Object.moneyCompleted = completedMoney\n        Object.inprogress = progress.length\n        Object.scheduled = scheduled.length\n        Object.completed = completed.length\n\n        resolve(Object)\n    }).catch((error) => {\n\n        console.log(error)\n        resolve({\n            response: \"error\",\n            flag: \"Possibly invalid input parameters\",\n        })\n    })\n \n}\n\n\n/**\n * \n * @function RideRow : Returns single ride details\n */\n\nconst RideRow = (props) => {\n    let statepick\n    let statepickword\n    let statedrop\n    let [details, setDetails] = useState(false)\n    let detailButton = details? \"less\":\"more\"\n    \n    if (props.ride.isDroppedPassenger===true) {\n        statedrop = \"YES\"\n    } else {\n        statedrop = \"NO\"\n    }\n\n    if (props.ride.isPickedUp === true) {\n        statepick = {backgroundColor:\"green\"}\n        statepickword = \"YES\"\n    } else {\n        statepick = {backgroundColor:\"red\"}\n        statepickword = \"NO\"\n    }\n    // Create a list of available destinations\n    const dest = () =>{\n        return props.ride.destinations.map((d) => {\n            return <ul><li>{d.location_name}</li></ul>\n        })\n    }\n    \n    return(\n        <>\n        <tr style ={{ backgroundColor: \"#ebd113\"}}>\n            <td>2</td>\n            <td>XN034</td>\n            <td>{ props.ride.passengers_number}</td>\n            <td>{ props.ride.request_type}</td>\n            <td>{ props.ride.date_time }</td>\n            <td>{ props.ride.date_time }</td>\n            <td style={ statepick }>{ statepickword }</td>\n            <td>{ statedrop }</td>\n            <td>{ props.ride.connect_type }</td>\n            <td><button className=\"btn btn-outline-info btn-sm\" onClick={ () => {\n                    setDetails(!details)  \n            }}>{ detailButton }</button></td>    \n        </tr>\n        <tr style = {{ display: details? \"\":\"none\" }}>\n            <td className=\"data-table\" >\n                <table className=\"table\" style={{ textAlign: \"center\"}} id=\"iner-table\">\n                    <thead className=\"thead-light\">\n                        <tr>\n                            <th colSpan=\"8\">Passenger info</th>\n                        </tr>\n                        <tr>\n                            <th>Name</th>\n                            <th>Surname</th>\n                            <th>Cellphone</th>\n                            <th>Gender</th>\n                            <th>Payment</th>\n                            <th>Amount</th>\n                            <th>From</th>\n                            <th>Destination(s)</th>\n                            <th>Wished pick up time</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td className=\"td-second\">{ props.ride.name }</td>\n                            <td className=\"td-second\">{props.ride.surname }</td>\n                            <td className=\"td-second\">{ props.ride.cellphone }</td>\n                            <td className=\"td-second\">{ props.ride.gender }</td>\n                            <td className=\"td-second\">{ props.ride.payment_method }</td>\n                            <td className=\"td-second\">N$ { props.ride.amount }</td>\n                            <td className=\"td-second\">fq{ props.ride.amount}</td>\n                            <td className=\"td-second\">{dest()}</td>\n                            <td className=\"td-second\">{props.ride.wished_pickup_time }</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </td>\n        </tr>\n       </>\n    )\n}\n\n/**\n * @function RideOverview : Main function rendering the rides overview page\n */\n\nfunction RideOverview() {\n\n\n    let [rides, setRides] = useState([])   // Main ride list of objects\n    let [inProgress, setInProgress] = useState(true)\n    let [scheduled, setScheduled] = useState(false)\n    let [completed, setCompleted] = useState(false)\n    let [InprogressCount, setInProgressCount] = useState(0)\n    let [ScheduledCount, setScheduledCount] = useState(0)\n    let [CompletedCount, setCompletedCount] = useState(0)\n    let [moneyInprogress, setMoneyInProgress] = useState({})\n    let [moneyScheduled, setMoneyScheduled] = useState({})\n    let [moneyCompleted, setMoneyCompleted] = useState({})\n    /*let [passengers_number, setPassengersNumber] = useState(0)\n    let [request_type, setRequestType] = useState(0)\n    let [date_time, setDateTime] = useState(0)\n    let [isPickedUp, setIsPickedUp] = useState(false)\n    let [isDroppedPassenger, setIsDroppedPassenger] = useState(false)\n    let [isDroppedDriver, setIsDroppedDriver] = useState(false)\n    let [connect_type, setConnectType] = useState('')\n    let [payment_method, setPaymentMethod] = useState('')\n    let [amount, setAmount] = useState(0)\n    let [destinations, setDestinations] = useState([])\n    let [name, setName] = useState('')\n    let [surname, setSurname] = useState('')\n    let [gender, setGender] = useState('')\n    let [cellphone, setCellphone] = useState('')  */\n    \n    let ENDPOINT = 'localhost:5558' \n\n    useEffect(() => {\n        let socket = io(ENDPOINT, { transports: [\"websocket\", \"polling\", \"flashsocket\"]})\n        const interval = setInterval(() => {\n            console.log(\"kaputo@taxiconnect\")\n            socket.on(\"getRideOverview-response\", (data) => {\n                if ((data !== undefined) && (data != null)) {\n                    /* Do something\n                    data.map((ride) => {\n                        console.log(ride)\n                    }) */\n                    setRides(data)\n                    // Get inprogress, scheduled and completed data to update count state\n                    new Promise((res) => {\n                        progressScheduledCompleted(data, res)\n                    }).then((future) => {\n                        console.log(future)\n                        setInProgressCount(future.inprogress)\n                        setMoneyInProgress(future.moneyInprogress)\n                        setScheduledCount(future.scheduled)\n                        setMoneyScheduled(future.moneyScheduled)\n                        setCompletedCount(future.completed)\n                        setMoneyCompleted(future.moneyCompleted)\n                        \n                    }).catch((error) => {\n                        console.log(error)\n                    })\n\n                } else {\n                    console.log(data.error) // data.error ?\n                    alert(\"Something went wrong while retrieving Data\")\n                }\n            })\n            socket.emit(\"getRideOverview\", {data: \"Get ride-overview Data!\"})\n        },2000)\n\n        return( () => {\n            clearInterval(interval)\n        })\n    \n    }, [\n        // re-render whenever any of these changes\n        rides,\n        ENDPOINT\n    ])\n\n    /**\n     * @function rideListInProgress : returns the list of rides in progress\n     * @function rideListScheduled : returns the list of scheduled rides\n     * @function rideListCompleted : returns the list of completed rides\n     * \n     */\n    \n    const rideListInProgress = () => {\n\n        return rides.map( currentRide => {\n         \n            if ( currentRide.isAccepted && currentRide.isPickedUp \n                && !currentRide.isArrivedToDestination) {\n                return <RideRow ride={currentRide}  />\n            } else { \n                //! Do nothing (Do not add the ride to the list if not in progress)\n             }\n        })\n    }\n\n    const rideListScheduled = () => {\n        return rides.map( currentRide => {\n            if ( currentRide.request_type === \"scheduled\") {\n                \n                return <RideRow ride={currentRide}  />\n            } else { \n                //! Do nothing (Do not add the ride to the list if not scheduled)\n             }\n        })\n    }\n\n    const rideListCompleted = () => {\n        return rides.map( currentRide => {\n            if ( currentRide.isArrivedToDestination) {\n                \n                return <RideRow ride={currentRide}  />\n            } else { \n                //! Do nothing --> Do not add the ride to the list if not completed\n                //! the ride is completed upon confirmation of either driver or passenger\n                //! Further display difference of both shall be done upon rendering of the row\n             }\n        })\n    }\n\n    const title_style = {\n        textAlign: \"center\",\n        marginTop: 10,\n        marginBottom: 15\n    }\n    const subtitle_style = {\n        textAlign: \"center\",\n        marginTop: 5,\n        marginBottom: 10\n    }\n\n    return(\n       \n        <div>\n\n            <div className=\"wrapper\">\n                <div className=\"left-column\">\n                <Sidebar />\n                </div>\n                <div className=\"right-column\" >\n                    <h1 style={ title_style }> Rides Overview </h1>\n                    <button style={{ marginLeft: 25}} className=\"btn btn-outline-info btn-sm \" onClick={ () => {\n                    setScheduled (false)\n                    setCompleted(false)\n                    setInProgress(true)  \n                    }}>Rides in progress [{ InprogressCount }]</button>\n\n                    <button style={{ marginLeft: 35}} className=\"btn btn-outline-info btn-sm\" onClick={ () => {\n                    setInProgress (false)\n                    setCompleted(false)\n                    setScheduled(true)  \n                    }}>Scheduled rides [{ ScheduledCount }]</button>\n\n                    <button style={{ marginLeft: 35}} className=\"btn btn-outline-info btn-sm\" onClick={ () => {\n                    setInProgress (false)\n                    setCompleted(true)\n                    setScheduled(false)  \n                    }}>Completed rides [{ CompletedCount }]</button>\n\n                        <div style = {{ display: inProgress? \"\":\"none\" }}>\n                            <h3 style={ subtitle_style }>Rides in progress </h3>\n                            <hr></hr>\n                            <div id=\"container\">\n                                \n                                <div>\n                                <h1 style={{ fontSize: 'large', color:\"blue\"}}> N$ { moneyInprogress[\"totalCash\"] }\n                                    <span style={{ fontSize: 'small', color:\"black\"}}> cash</span> \n                                </h1>\n                                </div>\n                                <div>\n                                <h1 style={{ fontSize: 'large', color:\"blue\"}}> N$ { moneyInprogress[\"totalWallet\"] }\n                                    <span style={{ fontSize: 'small', color:\"black\"}}> wallet</span> \n                                </h1>\n                                </div>\n                                <div>\n                                <h1 style={{ fontSize: 'large', color:\"blue\"}}> N$ { moneyInprogress[\"totalCashWallet\"] }\n                                    <span style={{ fontSize: 'small', color:\"black\"}}> Total</span> \n                                </h1>\n                                </div>\n                                <div style={{ backgroundColor: \"gray\"}}>\n                                <h1 style={{ fontSize: 'x-large', color:\"blue\"}}> N$ 20\n                                    <span style={{ fontSize: 'small', color:\"black\"}}> today</span> \n                                </h1>\n                                </div>\n                            </div>\n                            <hr></hr>\n                            <table className=\"table\" style={{ textAlign: \"center\"}}>\n                                <thead className=\"thead-light\">\n                                    <tr>\n                                        <th>#</th>\n                                        <th>Taxi number</th>\n                                        <th>Passengers</th>\n                                        <th>Request type</th>\n                                        <th>Date</th>\n                                        <th>Time requested</th>\n                                        <th>Client picked up</th>\n                                        <th>client dropped off</th>\n                                        <th>Connect type</th>\n                                        <th>...</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    { rideListInProgress() }\n                                </tbody>\n                            </table>\n                        </div>\n\n                        <div style = {{ display: scheduled? \"\":\"none\" }}>\n                            <h3 style={ subtitle_style }>Scheduled rides </h3>\n                            <hr></hr>\n                            <div id=\"container\">\n                                \n                                <div>\n                                <h1 style={{ fontSize: 'large', color:\"blue\"}}> N$ { moneyScheduled[\"totalCash\"] }\n                                    <span style={{ fontSize: 'small', color:\"black\"}}> cash</span> \n                                </h1>\n                                </div>\n                                <div>\n                                <h1 style={{ fontSize: 'large', color:\"blue\"}}> N$ { moneyScheduled[\"totalWallet\"] }\n                                    <span style={{ fontSize: 'small', color:\"black\"}}> wallet</span> \n                                </h1>\n                                </div>\n                                <div>\n                                <h1 style={{ fontSize: 'large', color:\"blue\"}}> N$ { moneyScheduled[\"totalCashWallet\"] }\n                                    <span style={{ fontSize: 'small', color:\"black\"}}> Total</span> \n                                </h1>\n                                </div>\n                                <div style={{ backgroundColor: \"gray\"}}>\n                                <h1 style={{ fontSize: 'x-large', color:\"blue\"}}> N$ 20\n                                    <span style={{ fontSize: 'small', color:\"black\"}}> today</span> \n                                </h1>\n                                </div>\n                            </div>\n                            <hr></hr>\n                            <table className=\"table\" style={{ textAlign: \"center\"}}>\n                                <thead className=\"thead-light\">\n                                    <tr>\n                                        <th>##</th>\n                                        <th>Taxi number</th>\n                                        <th>Passengers</th>\n                                        <th>Request type</th>\n                                        <th>Date</th>\n                                        <th>Time requested</th>\n                                        <th>Client picked up</th>\n                                        <th>client dropped off</th>\n                                        <th>Connect type</th>\n                                        <th>...</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    { rideListScheduled() }\n                                </tbody>\n                            </table>\n                        </div>\n\n                        <div style = {{ display: completed? \"\":\"none\" }}>\n                            <h3 style={ subtitle_style }>Completed rides</h3>\n                            <hr></hr>\n                            <div id=\"container\">\n                                \n                                <div>\n                                <h1 style={{ fontSize: 'large', color:\"blue\"}}> N$ { moneyCompleted[\"totalCash\"] }\n                                    <span style={{ fontSize: 'small', color:\"black\"}}> cash</span> \n                                </h1>\n                                </div>\n                                <div>\n                                <h1 style={{ fontSize: 'large', color:\"blue\"}}> N$ { moneyCompleted[\"totalWallet\"] }\n                                    <span style={{ fontSize: 'small', color:\"black\"}}> wallet</span> \n                                </h1>\n                                </div>\n                                <div>\n                                <h1 style={{ fontSize: 'large', color:\"blue\"}}> N$ { moneyCompleted[\"totalCashWallet\"] }\n                                    <span style={{ fontSize: 'small', color:\"black\"}}> Total</span> \n                                </h1>\n                                </div>\n                                <div style={{ backgroundColor: \"gray\"}}>\n                                <h1 style={{ fontSize: 'x-large', color:\"blue\"}}> N$ 20\n                                    <span style={{ fontSize: 'small', color:\"black\"}}> today</span> \n                                </h1>\n                                </div>\n                            </div>\n                            <hr></hr>\n                            <table className=\"table\" style={{ textAlign: \"center\"}}>\n                                <thead className=\"thead-light\">\n                                    <tr>\n                                        <th>###</th>\n                                        <th>Taxi number</th>\n                                        <th>Passengers</th>\n                                        <th>Request type</th>\n                                        <th>Date</th>\n                                        <th>Time requested</th>\n                                        <th>Client picked up</th>\n                                        <th>client dropped off</th>\n                                        <th>Connect type</th>\n                                        <th>...</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    { rideListCompleted() }\n                                </tbody>\n                            </table>\n                        </div>\n                </div>\n            </div>\n   \n        </div>\n    \n    )\n}\n\nexport default RideOverview","/home/mack/Documents/Admin/Admin-App/client/adminui/src/components/deliveryOverview/deliveryOverview.js",["44","45","46","47"],"import React, {useState, useEffect} from \"react\"\nimport io from 'socket.io-client'\nimport \"./deliveryOverview.css\"\nimport Sidebar from \"../sidebar/sidebar\"\n\n\n\n/**\n * @function GetCashWallet : Returns the total money of trips in progress, scheduled and completed\n *                          Of a given array of rides (cash and delivery returned)\n * @param {array} arrayData : An array of rides from either an API or Database of rides with known\n *                            keys. \n * \n */\n\nfunction GetCashWallet(arrayData, resolve) {\n  \n    let fare_array = [];\n    let fare_array_cash = [];\n    let fare_array_wallet = [];\n    const Sum = (arr) => arr.reduce((num1, num2) => num1 + num2, 0);\n    \n    arrayData.map((ride) => {\n        fare_array.push(Number(ride[\"amount\"]));\n\n        // Get rides with CASH as payment method\n        let payment_method = ride[\"payment_method\"].toUpperCase().trim();\n        if (/CASH/i.test(payment_method)) {\n        // if (payment_method ===\"CASH\") /CASH/ makes sure of spacing\n        fare_array_cash.push(Number(ride[\"amount\"]));\n        } else {\n        fare_array_wallet.push(Number(ride[\"amount\"]));\n        }\n    });\n    \n    let totalCash = Sum(fare_array_cash);\n    let totalWallet = Sum(fare_array_wallet);\n    let totalCashWallet = totalCash + totalWallet;\n    let CashWalletObject = { totalCash, totalWallet, totalCashWallet };\n\n    resolve(CashWalletObject)\n\n    //return CashWalletObject\n}\n\n/**\n * @function progressScheduledCompleted : Returns the total count and money of trips in progress, \n *                                        scheduled and completed\n *                          Of a given array of rides (cash and delivery returned)\n * @param {array} arrayData : An array of rides from either an API or Database of rides with known\n *                            keys. \n * \n */\n\nfunction progressScheduledCompleted(arrayData, resolve) {\n    \n    let progress = arrayData.filter(current => {\n        return current.isAccepted && current.isPickedUp\n            && !current.isArrivedToDestination\n    })\n\n    let scheduled = arrayData.filter(current => {\n        let Value = current.request_type === \"scheduled\"\n        return Value\n    })\n    let completed = arrayData.filter( current => {\n        return current.isArrivedToDestination\n    })\n    \n    Promise.all([\n            //let progressMoney = GetCashWallet(scheduled)\n        new Promise((res) => {\n            GetCashWallet(progress, res)\n        }),\n        new Promise((res) => {\n            GetCashWallet(scheduled, res)\n        }),\n        //let progressMoney = GetCashWallet(scheduled)\n        new Promise((res) => {\n            GetCashWallet(completed, res)\n        })\n\n    ]).then((future) => {\n        let [progressMoney, scheduledMoney, completedMoney] = future\n        let Object = {}\n        Object.moneyInprogress = progressMoney\n        Object.moneyScheduled = scheduledMoney\n        Object.moneyCompleted = completedMoney\n        Object.inprogress = progress.length\n        Object.scheduled = scheduled.length\n        Object.completed = completed.length\n\n        resolve(Object)\n    }).catch((error) => {\n\n        console.log(error)\n        resolve({\n            response: \"error\",\n            flag: \"Possibly invalid input parameters\",\n        })\n    })\n \n}\n\n\n\n\n\n/**\n * \n * @function DeliveryRow : Returns single ride details\n */\n\nconst DeliveryRow = (props) => {\n    let statepick\n    let statepickword\n    let statedrop\n    let [details, setDetails] = useState(false)\n    let detailButton = details? \"less\":\"more\"\n    \n    if (props.delivery.isDroppedPassenger===true) {\n        statedrop = \"YES\"\n    } else {\n        statedrop = \"NO\"\n    }\n\n    if (props.delivery.isPickedUp === true) {\n        statepick = {backgroundColor:\"green\"}\n        statepickword = \"YES\"\n    } else {\n        statepick = {backgroundColor:\"red\"}\n        statepickword = \"NO\"\n    }\n    // Create a list of available destinations\n    const dest = () =>{\n        return props.delivery.destinations.map((d) => {\n            return <ul><li>{d.location_name}</li></ul>\n        })\n    }\n    return(\n        <>\n        <tr style ={{ backgroundColor: \"#ebd113\"}}>\n            <td>2</td>\n            <td>YN067D</td>\n            <td>{ props.delivery.origin}</td>\n            <td>{ props.delivery.request_type}</td>\n            <td>{ props.delivery.date_time }</td>\n            <td>{ props.delivery.date_time }</td>\n            <td style={ statepick }>{ statepickword }</td>\n            <td>{ statedrop }</td>\n            <td>{ props.delivery.delivery_receiver } ({props.delivery.delivery_phone})</td>\n            <td><button className=\"btn btn-outline-info btn-sm\" onClick={ () => {\n                    setDetails(!details)  \n            }}>{ detailButton }</button></td>    \n        </tr>\n        <tr style = {{ display: details? \"\":\"none\" }}>\n            <td className=\"data-table\" >\n                <table className=\"table\" style={{ textAlign: \"center\"}} id=\"iner-table\">\n                    <thead className=\"thead-light\">\n                        <tr>\n                            <th colSpan=\"8\">Requestor info</th>\n                        </tr>\n                        <tr>\n                            <th>Name</th>\n                            <th>Surname</th>\n                            <th>Cellphone</th>\n                            <th>Gender</th>\n                            <th>Payment</th>\n                            <th>Amount</th>\n                            <th>From</th>\n                            <th>Destination(s)</th>\n                            <th>Wished pick up time</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td className=\"td-second\">{ props.delivery.name }</td>\n                            <td className=\"td-second\">{props.delivery.surname }</td>\n                            <td className=\"td-second\">{ props.delivery.cellphone }</td>\n                            <td className=\"td-second\">{ props.delivery.gender }</td>\n                            <td className=\"td-second\">{ props.delivery.payment_method }</td>\n                            <td className=\"td-second\">N$ { props.delivery.amount }</td>\n                            <td className=\"td-second\">fq{ props.delivery.amount}</td>\n                            <td className=\"td-second\">{dest()}</td>\n                            <td className=\"td-second\">{props.delivery.wished_pickup_time }</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </td>\n        </tr>\n       </>\n        \n\n    )\n}\n\n\nfunction DeliveryOverview() {\n\n\n    let [deliveries, setDeliveries] = useState([])   // Main ride list of objects\n    let [inProgress, setInProgress] = useState(true)\n    let [scheduled, setScheduled] = useState(false)\n    let [completed, setCompleted] = useState(false)\n    let [InprogressCount, setInProgressCount] = useState(0)\n    let [ScheduledCount, setScheduledCount] = useState(0)\n    let [CompletedCount, setCompletedCount] = useState(0)\n    let [moneyInprogress, setMoneyInProgress] = useState({})\n    let [moneyScheduled, setMoneyScheduled] = useState({})\n    let [moneyCompleted, setMoneyCompleted] = useState({})\n    /*let [passengers_number, setPassengersNumber] = useState(0)\n    let [request_type, setRequestType] = useState(0)\n    let [date_time, setDateTime] = useState(0)\n    let [isPickedUp, setIsPickedUp] = useState(false)\n    let [isDroppedPassenger, setIsDroppedPassenger] = useState(false)\n    let [isDroppedDriver, setIsDroppedDriver] = useState(false)\n    let [connect_type, setConnectType] = useState('')\n    let [payment_method, setPaymentMethod] = useState('')\n    let [amount, setAmount] = useState(0)\n    let [destinations, setDestinations] = useState([])\n    let [name, setName] = useState('')\n    let [surname, setSurname] = useState('')\n    let [gender, setGender] = useState('')\n    let [cellphone, setCellphone] = useState('')  */\n    \n    let ENDPOINT = 'localhost:5558' \n\n    useEffect(() => {\n        let socket = io(ENDPOINT, { transports: [\"websocket\", \"polling\", \"flashsocket\"]})\n        const interval = setInterval(() => {\n            console.log(\"kaputo@taxiconnect-delivery\")\n            socket.on(\"getDeliveryOverview-response\", (data) => {\n                if ((data !== undefined) && (data != null)) {\n                    /* Do something\n                    data.map((ride) => {\n                        console.log(ride)\n                    }) */\n                    setDeliveries(data)\n                    // Get inprogress, scheduled and completed data to update count state\n                    new Promise((res) => {\n                        progressScheduledCompleted(data, res)\n                    }).then((future) => {\n                        console.log(future)\n                        setInProgressCount(future.inprogress)\n                        setMoneyInProgress(future.moneyInprogress)\n                        setScheduledCount(future.scheduled)\n                        setMoneyScheduled(future.moneyScheduled)\n                        setCompletedCount(future.completed)\n                        setMoneyCompleted(future.moneyCompleted)\n                    }).catch((error) => {\n                        console.log(error)\n                    })\n                } else {\n                    console.log(data.error) // data.error ?\n                    alert(\"Something went wrong while retrieving Data\")\n                }\n            })\n            socket.emit(\"getDeliveryOverview\", {data: \"Get delivery-overview Data!\"})\n        },1000)\n\n        return( () => {\n            clearInterval(interval)\n        })\n    \n    }, [\n        // re-render whenever any of these changes\n        deliveries,\n        ENDPOINT\n    ])\n\n    /**\n     * @function deliveryListInProgress : returns the list of rides in progress\n     * @function deliveryListScheduled : returns the list of scheduled rides\n     * @function deliveyListCompleted : returns the list of completed rides\n     * \n     */\n    const deliveryListInProgress = () => {\n        return deliveries.map( currentDelivery => {\n            if ( currentDelivery.isAccepted && currentDelivery.isPickedUp \n                && !currentDelivery.isArrivedToDestination) {\n                \n                return <DeliveryRow delivery={currentDelivery}  />\n            } else { \n                //! Do nothing (Do not add the delivery to the list if not in progress)\n             }\n            \n        })\n    }\n\n    const deliveryListScheduled = () => {\n        return deliveries.map( currentDelivery => {\n            if ( currentDelivery.request_type === \"scheduled\") {\n                \n                return <DeliveryRow delivery={currentDelivery}  />\n            } else { \n                //! Do nothing (Do not add the delivery to the list if not scheduled)\n             }\n        })\n    }\n\n    const deliveryListCompleted = () => {\n        return deliveries.map( currentDelivery => {\n            if ( currentDelivery.isArrivedToDestination) {\n                \n                return <DeliveryRow delivery={currentDelivery}  />\n            } else { \n                //! Do nothing --> Do not add the delivery to the list if not completed\n                //! the delivery is completed upon confirmation of either driver or receiver\n                //! Further display difference of both shall be done upon rendering of the row\n             }\n        })\n    }\n\n    const title_style = {\n        textAlign: \"center\",\n        marginTop: 10,\n        marginBottom: 15\n    }\n    const subtitle_style = {\n        textAlign: \"center\",\n        marginTop: 5,\n        marginBottom: 10\n    }\n\n    return(\n       \n        <div>\n\n            <div className=\"wrapper\">\n                <div className=\"left-column\">\n                <Sidebar />\n                </div>\n                <div className=\"right-column\" >\n                    <h1 style={ title_style }> Deliveries Overview </h1>\n                    <button style={{ marginLeft: 25}} className=\"btn btn-outline-info btn-sm \" onClick={ () => {\n                    setScheduled (false)\n                    setCompleted(false)\n                    setInProgress(true)  \n                    }}>Deliveries in progress [{ InprogressCount }]</button>\n\n                    <button style={{ marginLeft: 35}} className=\"btn btn-outline-info btn-sm\" onClick={ () => {\n                    setInProgress (false)\n                    setCompleted(false)\n                    setScheduled(true)  \n                    }}>Scheduled Deliveries [{ ScheduledCount }]</button>\n\n                    <button style={{ marginLeft: 35}} className=\"btn btn-outline-info btn-sm\" onClick={ () => {\n                    setInProgress (false)\n                    setCompleted(true)\n                    setScheduled(false)  \n                    }}>Completed Deliveries [{ CompletedCount }]</button>\n\n                    <div style = {{ display: inProgress? \"\":\"none\" }}>\n                        <h3 style={ subtitle_style }>Deliveries in progress </h3>\n                        <hr></hr>\n                            <div id=\"container\">\n                                \n                                <div>\n                                <h1 style={{ fontSize: 'large', color:\"blue\"}}> N$ { moneyInprogress[\"totalCash\"] }\n                                    <span style={{ fontSize: 'small', color:\"black\"}}> cash</span> \n                                </h1>\n                                </div>\n                                <div>\n                                <h1 style={{ fontSize: 'large', color:\"blue\"}}> N$ { moneyInprogress[\"totalWallet\"] }\n                                    <span style={{ fontSize: 'small', color:\"black\"}}> wallet</span> \n                                </h1>\n                                </div>\n                                <div>\n                                <h1 style={{ fontSize: 'large', color:\"blue\"}}> N$ { moneyInprogress[\"totalCashWallet\"] }\n                                    <span style={{ fontSize: 'small', color:\"black\"}}> Total</span> \n                                </h1>\n                                </div>\n                                <div style={{ backgroundColor: \"gray\"}}>\n                                <h1 style={{ fontSize: 'x-large', color:\"blue\"}}> N$ 20\n                                    <span style={{ fontSize: 'small', color:\"black\"}}> today</span> \n                                </h1>\n                                </div>\n                            </div>\n                            <hr></hr>\n                        <table className=\"table\" style={{ textAlign: \"center\"}}>\n                            <thead className=\"thead-light\">\n                                <tr>\n                                    <th>#</th>\n                                    <th>Taxi number</th>\n                                    <th>Origin</th>\n                                    <th>Request type</th>\n                                    <th>Date</th>\n                                    <th>Time requested</th>\n                                    <th>Item picked up</th>\n                                    <th>Item dropped off</th>\n                                    <th>Receiver</th>\n                                    <th>...</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                { deliveryListInProgress () }\n                            </tbody>\n                        </table>\n                    </div>\n\n                    <div style = {{ display: scheduled? \"\":\"none\" }}>\n                        <h3 style={ subtitle_style }>Scheduled deliveries </h3>\n                        <hr></hr>\n                            <div id=\"container\">\n                                \n                                <div>\n                                <h1 style={{ fontSize: 'large', color:\"blue\"}}> N$ { moneyScheduled[\"totalCash\"] }\n                                    <span style={{ fontSize: 'small', color:\"black\"}}> cash</span> \n                                </h1>\n                                </div>\n                                <div>\n                                <h1 style={{ fontSize: 'large', color:\"blue\"}}> N$ { moneyScheduled[\"totalWallet\"] }\n                                    <span style={{ fontSize: 'small', color:\"black\"}}> wallet</span> \n                                </h1>\n                                </div>\n                                <div>\n                                <h1 style={{ fontSize: 'large', color:\"blue\"}}> N$ { moneyScheduled[\"totalCashWallet\"] }\n                                    <span style={{ fontSize: 'small', color:\"black\"}}> Total</span> \n                                </h1>\n                                </div>\n                                <div style={{ backgroundColor: \"gray\"}}>\n                                <h1 style={{ fontSize: 'x-large', color:\"blue\"}}> N$ 20\n                                    <span style={{ fontSize: 'small', color:\"black\"}}> today</span> \n                                </h1>\n                                </div>\n                            </div>\n                            <hr></hr>\n                        <table className=\"table\" style={{ textAlign: \"center\"}}>\n                            <thead className=\"thead-light\">\n                                <tr>\n                                    <th>##</th>\n                                    <th>Taxi number</th>\n                                    <th>Origin</th>\n                                    <th>Request type</th>\n                                    <th>Date</th>\n                                    <th>Time requested</th>\n                                    <th>Item picked up</th>\n                                    <th>Item dropped off</th>\n                                    <th>Receiver</th>\n                                    <th>...</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                { deliveryListScheduled() }\n                            </tbody>\n                        </table>\n                    </div>\n\n                    <div style = {{ display: completed? \"\":\"none\" }}>\n                        <h3 style={ subtitle_style }>Completed deliveries </h3>\n                        <hr></hr>\n                            <div id=\"container\">\n                                \n                                <div>\n                                <h1 style={{ fontSize: 'large', color:\"blue\"}}> N$ { moneyCompleted[\"totalCash\"] }\n                                    <span style={{ fontSize: 'small', color:\"black\"}}> cash</span> \n                                </h1>\n                                </div>\n                                <div>\n                                <h1 style={{ fontSize: 'large', color:\"blue\"}}> N$ { moneyCompleted[\"totalWallet\"] }\n                                    <span style={{ fontSize: 'small', color:\"black\"}}> wallet</span> \n                                </h1>\n                                </div>\n                                <div>\n                                <h1 style={{ fontSize: 'large', color:\"blue\"}}> N$ { moneyCompleted[\"totalCashWallet\"] }\n                                    <span style={{ fontSize: 'small', color:\"black\"}}> Total</span> \n                                </h1>\n                                </div>\n                                <div style={{ backgroundColor: \"gray\"}}>\n                                <h1 style={{ fontSize: 'x-large', color:\"blue\"}}> N$ 20\n                                    <span style={{ fontSize: 'small', color:\"black\"}}> today</span> \n                                </h1>\n                                </div>\n                            </div>\n                            <hr></hr>\n                        <table className=\"table\" style={{ textAlign: \"center\"}}>\n                            <thead className=\"thead-light\">\n                                <tr>\n                                    <th>###</th>\n                                    <th>Taxi number</th>\n                                    <th>Origin</th>\n                                    <th>Request type</th>\n                                    <th>Date</th>\n                                    <th>Time requested</th>\n                                    <th>Item picked up</th>\n                                    <th>Item dropped off</th>\n                                    <th>Receiver</th>\n                                    <th>...</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                { deliveryListCompleted() }\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n   \n        </div>\n    \n    )\n}\n\nexport default DeliveryOverview",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":2,"column":42,"nodeType":"54","messageId":"55","endLine":2,"endColumn":48},{"ruleId":"52","severity":1,"message":"56","line":2,"column":27,"nodeType":"54","messageId":"55","endLine":2,"endColumn":33},{"ruleId":"57","severity":1,"message":"58","line":186,"column":100,"nodeType":"59","messageId":"60","endLine":186,"endColumn":102},{"ruleId":"61","severity":1,"message":"62","line":21,"column":26,"nodeType":"63","messageId":"64","endLine":21,"endColumn":28},{"ruleId":"61","severity":1,"message":"65","line":279,"column":39,"nodeType":"63","messageId":"66","endLine":279,"endColumn":41},{"ruleId":"61","severity":1,"message":"65","line":291,"column":39,"nodeType":"63","messageId":"66","endLine":291,"endColumn":41},{"ruleId":"61","severity":1,"message":"65","line":302,"column":39,"nodeType":"63","messageId":"66","endLine":302,"endColumn":41},{"ruleId":"61","severity":1,"message":"62","line":23,"column":26,"nodeType":"63","messageId":"64","endLine":23,"endColumn":28},{"ruleId":"61","severity":1,"message":"65","line":278,"column":48,"nodeType":"63","messageId":"66","endLine":278,"endColumn":50},{"ruleId":"61","severity":1,"message":"65","line":291,"column":48,"nodeType":"63","messageId":"66","endLine":291,"endColumn":50},{"ruleId":"61","severity":1,"message":"65","line":302,"column":48,"nodeType":"63","messageId":"66","endLine":302,"endColumn":50},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-global-assign","no-unsafe-negation"]